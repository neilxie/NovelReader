package com.max.novelreader.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.max.novelreader.bean.Book;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK".
*/
public class BookDao extends AbstractDao<Book, Long> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NovelId = new Property(1, String.class, "novelId", false, "NOVEL_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property CoverUrl = new Property(3, String.class, "coverUrl", false, "COVER_URL");
        public final static Property Description = new Property(4, String.class, "description", false, "DESCRIPTION");
        public final static Property LastChapterId = new Property(5, String.class, "lastChapterId", false, "LAST_CHAPTER_ID");
        public final static Property LastUpdateTime = new Property(6, String.class, "lastUpdateTime", false, "LAST_UPDATE_TIME");
        public final static Property ReadChapterId = new Property(7, String.class, "readChapterId", false, "READ_CHAPTER_ID");
        public final static Property ReadChapterName = new Property(8, String.class, "readChapterName", false, "READ_CHAPTER_NAME");
        public final static Property ReadPosition = new Property(9, Integer.class, "readPosition", false, "READ_POSITION");
        public final static Property ReadPageTxt = new Property(10, String.class, "readPageTxt", false, "READ_PAGE_TXT");
        public final static Property ReadCount = new Property(11, Integer.class, "readCount", false, "READ_COUNT");
        public final static Property UnreadCount = new Property(12, Integer.class, "unreadCount", false, "UNREAD_COUNT");
        public final static Property SiteId = new Property(13, String.class, "siteId", false, "SITE_ID");
        public final static Property DownloadUrl = new Property(14, String.class, "downloadUrl", false, "DOWNLOAD_URL");
        public final static Property LocalPath = new Property(15, String.class, "localPath", false, "LOCAL_PATH");
        public final static Property DownloadStatus = new Property(16, Integer.class, "downloadStatus", false, "DOWNLOAD_STATUS");
        public final static Property Author = new Property(17, String.class, "author", false, "AUTHOR");
        public final static Property Category = new Property(18, String.class, "category", false, "CATEGORY");
    };


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NOVEL_ID\" TEXT," + // 1: novelId
                "\"NAME\" TEXT," + // 2: name
                "\"COVER_URL\" TEXT," + // 3: coverUrl
                "\"DESCRIPTION\" TEXT," + // 4: description
                "\"LAST_CHAPTER_ID\" TEXT," + // 5: lastChapterId
                "\"LAST_UPDATE_TIME\" TEXT," + // 6: lastUpdateTime
                "\"READ_CHAPTER_ID\" TEXT," + // 7: readChapterId
                "\"READ_CHAPTER_NAME\" TEXT," + // 8: readChapterName
                "\"READ_POSITION\" INTEGER," + // 9: readPosition
                "\"READ_PAGE_TXT\" TEXT," + // 10: readPageTxt
                "\"READ_COUNT\" INTEGER," + // 11: readCount
                "\"UNREAD_COUNT\" INTEGER," + // 12: unreadCount
                "\"SITE_ID\" TEXT," + // 13: siteId
                "\"DOWNLOAD_URL\" TEXT," + // 14: downloadUrl
                "\"LOCAL_PATH\" TEXT," + // 15: localPath
                "\"DOWNLOAD_STATUS\" INTEGER," + // 16: downloadStatus
                "\"AUTHOR\" TEXT," + // 17: author
                "\"CATEGORY\" TEXT);"); // 18: category
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String novelId = entity.getNovelId();
        if (novelId != null) {
            stmt.bindString(2, novelId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String coverUrl = entity.getCoverUrl();
        if (coverUrl != null) {
            stmt.bindString(4, coverUrl);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(5, description);
        }
 
        String lastChapterId = entity.getLastChapterId();
        if (lastChapterId != null) {
            stmt.bindString(6, lastChapterId);
        }
 
        String lastUpdateTime = entity.getLastUpdateTime();
        if (lastUpdateTime != null) {
            stmt.bindString(7, lastUpdateTime);
        }
 
        String readChapterId = entity.getReadChapterId();
        if (readChapterId != null) {
            stmt.bindString(8, readChapterId);
        }
 
        String readChapterName = entity.getReadChapterName();
        if (readChapterName != null) {
            stmt.bindString(9, readChapterName);
        }
 
        Integer readPosition = entity.getReadPosition();
        if (readPosition != null) {
            stmt.bindLong(10, readPosition);
        }
 
        String readPageTxt = entity.getReadPageTxt();
        if (readPageTxt != null) {
            stmt.bindString(11, readPageTxt);
        }
 
        Integer readCount = entity.getReadCount();
        if (readCount != null) {
            stmt.bindLong(12, readCount);
        }
 
        Integer unreadCount = entity.getUnreadCount();
        if (unreadCount != null) {
            stmt.bindLong(13, unreadCount);
        }
 
        String siteId = entity.getSiteId();
        if (siteId != null) {
            stmt.bindString(14, siteId);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(15, downloadUrl);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(16, localPath);
        }
 
        Integer downloadStatus = entity.getDownloadStatus();
        if (downloadStatus != null) {
            stmt.bindLong(17, downloadStatus);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(18, author);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(19, category);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // novelId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // coverUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // description
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lastChapterId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lastUpdateTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // readChapterId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // readChapterName
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // readPosition
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // readPageTxt
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // readCount
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // unreadCount
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // siteId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // downloadUrl
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // localPath
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // downloadStatus
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // author
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // category
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNovelId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCoverUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLastChapterId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLastUpdateTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReadChapterId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setReadChapterName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setReadPosition(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setReadPageTxt(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setReadCount(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setUnreadCount(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setSiteId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDownloadUrl(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLocalPath(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDownloadStatus(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setAuthor(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCategory(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Book entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Book entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
